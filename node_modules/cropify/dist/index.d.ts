import { loadImage } from '@napi-rs/canvas';

type OutputFormat = 'png' | 'jpeg' | 'webp';
type FitMode = 'cover' | 'contain' | 'fill' | 'inside' | 'outside';
type Position = 'center' | 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
type ShapeType = 'rectangle' | 'circle' | 'polygon' | 'star' | 'custom';
interface FilterOptions {
    brightness?: number;
    contrast?: number;
    saturation?: number;
    blur?: number;
    grayscale?: boolean;
    sepia?: boolean;
    invert?: boolean;
    hue?: number;
}
interface ShapeOptions {
    type: ShapeType;
    sides?: number;
    points?: Array<{
        x: number;
        y: number;
    }>;
    customPath?: string;
}
interface QualityOptions {
    format?: OutputFormat;
    quality?: number;
    progressive?: boolean;
    adaptiveQuality?: boolean;
}
interface MetadataOptions {
    preserveExif?: boolean;
    autoRotate?: boolean;
    removeMetadata?: boolean;
}
interface CropifyOptions {
    imagePath: Parameters<typeof loadImage>[0];
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    borderRadius?: number;
    circle?: boolean;
    cropCenter?: boolean;
    fit?: FitMode;
    position?: Position;
    background?: string;
    shape?: ShapeOptions;
    filters?: FilterOptions;
    output?: QualityOptions;
    metadata?: MetadataOptions;
}
declare const cropImage: (option: CropifyOptions) => Promise<Buffer<ArrayBufferLike>>;
declare const cropImages: (images: Array<CropifyOptions & {
    outputPath?: string;
}>) => Promise<{
    success: boolean;
    buffer?: Buffer;
    outputPath?: string;
    originalPath: any;
    error?: string;
}[]>;
declare const generateThumbnails: (imagePath: Parameters<typeof loadImage>[0], sizes: Array<{
    width: number;
    height: number;
    suffix?: string;
}>, baseOptions?: Partial<CropifyOptions>) => Promise<{
    success: boolean;
    buffer?: Buffer;
    width: number;
    height: number;
    suffix?: string;
    error?: string;
}[]>;
declare const presets: {
    instagram: {
        square: {
            width: number;
            height: number;
        };
        story: {
            width: number;
            height: number;
        };
        landscape: {
            width: number;
            height: number;
        };
    };
    twitter: {
        header: {
            width: number;
            height: number;
        };
        post: {
            width: number;
            height: number;
        };
    };
    facebook: {
        cover: {
            width: number;
            height: number;
        };
        post: {
            width: number;
            height: number;
        };
    };
    thumbnails: {
        small: {
            width: number;
            height: number;
        };
        medium: {
            width: number;
            height: number;
        };
        large: {
            width: number;
            height: number;
        };
    };
};

export { type CropifyOptions, type FilterOptions, type FitMode, type OutputFormat, type Position, type ShapeOptions, cropImage, cropImages, generateThumbnails, presets };
